#!/bin/sh

# Skip RuboCop check if SKIP_RUBOCOP is set
# Usage: SKIP_RUBOCOP=true git commit -m "Commit message"
if [ "$SKIP_RUBOCOP" = "true" ]; then
  echo "⏩ Skipping RuboCop check..."
  exit 0
fi

# Get list of staged files that are Ruby files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=d | grep -E '\.(rb|rake)$')

if [ "$STAGED_FILES" = "" ]; then
  exit 0
fi

# Filter out files that are excluded in .rubocop.yml
FILTERED_FILES=$(echo "$STAGED_FILES" | grep -v -E 'db/(schema|migrate).*\.rb$' | grep -v -E '(bin|node_modules|tmp|vendor|log)/')

echo "Running RuboCop on staged files..."
echo "Files to check:"
echo "$FILTERED_FILES"

# Run RuboCop on staged files (without auto-correct)
# Use --force-exclusion to ensure .rubocop.yml exclusions are respected
if [ "$FILTERED_FILES" = "" ]; then
  echo "No files to check after filtering"
  exit 0
fi

echo "$FILTERED_FILES" | tr '\n' '\0' | xargs -0 bundle exec rubocop

# If RuboCop fails, prevent the commit
if [ $? -ne 0 ]; then
  echo "❌ RuboCop found issues. Please fix them before committing."
  echo "   You can run 'bundle exec rubocop -a <file>' to auto-correct issues"
  echo "   Or use SKIP_RUBOCOP=true git commit ... to skip RuboCop check"
  exit 1
fi

echo "✅ RuboCop passed. Proceeding with commit..."
exit 0
